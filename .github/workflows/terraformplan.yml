# This is a basic workflow to help you get started with Actions

name: Terraform Plan

# Controls when the workflow will run
on:
   # Triggers the workflow on push or pull request events but only for the main branch
   pull_request:
      paths:
         - terraform/infrastructure/**

   # Allows you to run this workflow manually from the Actions tab
   workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
   # This workflow contains a single job called "build"
   Plan:
      # The type of runner that the job will run on
      runs-on: ubuntu-latest
      env:
         TERM: xterm-256color
      environment: Production

      # Steps represent a sequence of tasks that will be executed as part of the job
      steps:
         - name: oci-cli
           uses: bytesbay/oci-cli-action@v1.0.2
           with:
              user: '${{ secrets.OCI_USER }}'
              fingerprint: '${{ secrets.OCI_FINGERPRINT }}'
              tenancy: '${{ secrets.OCI_TENANCY }}'
              region: '${{ secrets.OCI_REGION }}'
              api_key: |
                 ${{ secrets.OCI_API_KEY }}
              verbose: true

         - name: bat
           run: |
              sudo apt install bat -y

         # Runs a set of commands using the runners shell
         - name: Run a multi-line script
           run: |
              export BRANCH=${{ github.head_ref }}
              [[ -z "$BRANCH" ]] && export BRANCH=main

              oci resource-manager stack get-stack-tf-state --stack-id ${{ secrets.OCI_STACK }} --file state.tfstate

              export STACK_ID=$(oci resource-manager stack create-from-git-provider --terraform-version '1.0.x' -c ${{ secrets.OCI_TENANCY }} --config-source-configuration-source-provider-id ${{ secrets.OCI_CONFIG_SOURCE_PROVIDER }} --config-source-branch-name $BRANCH --config-source-repository-url https://github.com/Cringers/crossword --config-source-working-directory terraform/infrastructure | jq -r .data.id)

              oci resource-manager job create-import-tf-state-job --stack-id $STACK_ID --tf-state-file state.tfstate --wait-for-state SUCCEEDED --wait-for-state FAILED

              oci resource-manager job create-plan-job --stack-id $STACK_ID --query data.id --wait-for-state SUCCEEDED --wait-for-state FAILED | xargs -I {} oci resource-manager job get-job-logs --all --job-id {} --query "data[].message[]" | jq -r "flatten[]"  > output.tf

              echo $STACK_ID > id.txt

              batcat --theme=ansi --color=always --paging=never id.txt
              batcat --theme=ansi --color=always --paging=never output.tf

         - name: Upload Plan Log
           uses: actions/upload-artifact@v3
           with:
              name: plan
              path: output.tf

         - name: Upload ID
           uses: actions/upload-artifact@v3
           with:
              name: id
              path: id.txt
